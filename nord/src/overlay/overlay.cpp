#include "overlay.hpp"

#include <thread>

#include "../data/process_hook.hpp"
#include "../utils/logger/logger.hpp"
#include "menu/fonts/Inter-Regular.c"
#include "menu/fonts/Inter-SemiBold.c"
#include "menu/fonts/fa-solid-900.c"
#include "menu/fonts/font-awesome.h"
#include "menu/menu.hpp"
#define STB_IMAGE_IMPLEMENTATION
#include "../imgui/stb.h"

#define IS_RENDERABLE ( process_hook_mgr.window_active || overlay_mgr.is_focused )

namespace nord
{
    unsigned char LOGO[ 1350 ] = {
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00,
        0x64, 0x00, 0x00, 0x00, 0x64, 0x08, 0x06, 0x00, 0x00, 0x00, 0x70, 0xE2, 0x95, 0x54, 0x00, 0x00, 0x00, 0x09, 0x70,
        0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00,
        0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00,
        0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61, 0x05, 0x00, 0x00, 0x04, 0xDB, 0x49, 0x44, 0x41, 0x54, 0x78, 0x01, 0xED, 0x9B,
        0x69, 0x4F, 0x63, 0x55, 0x18, 0xC7, 0xFF, 0xDD, 0xE9, 0x4E, 0x17, 0xE8, 0x42, 0x69, 0x4B, 0x0B, 0x65, 0x6B, 0x07,
        0x26, 0xA0, 0x4E, 0xA2, 0x46, 0x7D, 0xEF, 0x57, 0xF2, 0x23, 0x19, 0xDF, 0x1A, 0xE3, 0x1B, 0x35, 0x9A, 0x59, 0x12,
        0x9D, 0x60, 0x22, 0x30, 0xC9, 0x80, 0x28, 0xC8, 0x32, 0x4C, 0x19, 0xA0, 0xD0, 0x52, 0x0A, 0x78, 0xCE, 0x35, 0x41,
        0xA1, 0x55, 0x67, 0x98, 0x02, 0xFF, 0x43, 0x9E, 0x5F, 0x72, 0x43, 0x7A, 0xDB, 0xD2, 0xA4, 0xBF, 0xFB, 0x2C, 0xF7,
        0x39, 0xA7, 0xB6, 0xCA, 0xCC, 0xC7, 0x35, 0x1B, 0xCE, 0x5C, 0x10, 0x28, 0x70, 0xDA, 0x6C, 0x50, 0x32, 0x6C, 0x6E,
        0x08, 0x14, 0xD8, 0x21, 0x50, 0x21, 0x42, 0xC8, 0x10, 0x21, 0x64, 0x88, 0x10, 0x32, 0x44, 0x08, 0x19, 0x22, 0x84,
        0x0C, 0x11, 0x42, 0x86, 0x08, 0x21, 0x43, 0x84, 0x90, 0x21, 0x42, 0xC8, 0x10, 0x21, 0x64, 0x88, 0x10, 0x32, 0x44,
        0x08, 0x19, 0x22, 0x84, 0x0C, 0x11, 0x42, 0x86, 0x08, 0x21, 0x43, 0x84, 0x90, 0x21, 0x42, 0xC8, 0x10, 0x21, 0x64,
        0x88, 0x10, 0x32, 0x44, 0x08, 0x19, 0x22, 0x84, 0x0C, 0x11, 0x42, 0x86, 0x08, 0x21, 0xE3, 0x4E, 0x08, 0xB1, 0xD9,
        0x6C, 0xD6, 0x71, 0x17, 0xB8, 0x13, 0x42, 0xB2, 0x63, 0x45, 0xF4, 0xE7, 0x06, 0x70, 0x17, 0x70, 0xC2, 0x70, 0xEC,
        0x4E, 0x07, 0x0A, 0xF7, 0xC7, 0xD1, 0x38, 0xA8, 0x63, 0x6B, 0x65, 0x0D, 0x67, 0x67, 0x67, 0x30, 0x19, 0xE3, 0x23,
        0x24, 0xA1, 0x22, 0xC3, 0x1B, 0xF0, 0x23, 0x92, 0x88, 0x23, 0x18, 0xED, 0x85, 0xE9, 0x18, 0x2D, 0xC4, 0x6E, 0xB7,
        0x23, 0x3F, 0x59, 0x3A, 0x7F, 0x9C, 0x2F, 0x97, 0x60, 0x3A, 0x46, 0x0B, 0x89, 0xA4, 0xFA, 0xD0, 0x9B, 0x88, 0x9D,
        0x3F, 0x4E, 0x16, 0x06, 0xE1, 0x0F, 0x87, 0x60, 0x32, 0xC6, 0x0A, 0xD1, 0x5D, 0x55, 0x71, 0x6A, 0xE2, 0x42, 0x77,
        0xE5, 0x74, 0x39, 0x31, 0x74, 0xCF, 0xEC, 0x28, 0x31, 0x56, 0x48, 0xB8, 0x3F, 0x8A, 0x68, 0xBA, 0xAF, 0xED, 0x7C,
        0x32, 0x9F, 0x81, 0xC7, 0xE7, 0x85, 0xA9, 0x18, 0x2B, 0x44, 0xD7, 0x8F, 0xD3, 0xD3, 0xD3, 0xB6, 0xF3, 0x6E, 0x6F,
        0x8F, 0xAA, 0x2B, 0x23, 0x30, 0x15, 0x23, 0x85, 0xE8, 0xD4, 0xB4, 0xB3, 0xB1, 0x8D, 0xB5, 0xC5, 0xE5, 0x8E, 0xCF,
        0xA7, 0x87, 0x73, 0x70, 0xA8, 0x76, 0xD8, 0x44, 0x8C, 0x14, 0x32, 0x32, 0x5B, 0xC6, 0xD8, 0x83, 0x69, 0x3C, 0x7F,
        0xFA, 0x0B, 0xF6, 0xAB, 0xAF, 0xDA, 0x9E, 0xF7, 0x06, 0xFD, 0x48, 0x15, 0x72, 0x30, 0x11, 0xE3, 0x84, 0xE8, 0xFA,
        0x90, 0x2E, 0xE6, 0x30, 0x54, 0x19, 0xC5, 0xE4, 0xFB, 0x33, 0x98, 0x7F, 0xF8, 0x14, 0xAD, 0xE3, 0x56, 0xDB, 0xEB,
        0xF2, 0x95, 0x92, 0x15, 0x49, 0xA6, 0x61, 0x9C, 0x90, 0xC1, 0xD1, 0xA1, 0xF3, 0xA2, 0x9D, 0x50, 0x05, 0x7C, 0xFC,
        0xC1, 0x7D, 0xAC, 0x3D, 0x6B, 0x4F, 0x5D, 0xA1, 0x58, 0x2F, 0xE2, 0x99, 0x14, 0x4C, 0xC3, 0x28, 0x21, 0xBA, 0x60,
        0x17, 0xA7, 0xC6, 0x2F, 0x9C, 0x0B, 0x46, 0xC3, 0x96, 0x18, 0x3D, 0x3A, 0xB9, 0x4C, 0x69, 0xB6, 0x02, 0x9B, 0xDD,
        0xAC, 0xA1, 0xA3, 0x51, 0x42, 0x86, 0xA7, 0xC7, 0xE1, 0x70, 0xB7, 0xFF, 0xA4, 0xBE, 0xC7, 0xEF, 0xB5, 0x8E, 0xCB,
        0x04, 0x22, 0x21, 0xAB, 0xC0, 0x9B, 0x84, 0x31, 0x42, 0x9C, 0x4A, 0x44, 0x5F, 0x36, 0x8D, 0x37, 0x25, 0x53, 0x2A,
        0xC0, 0xEE, 0x30, 0xA7, 0xE3, 0x32, 0x46, 0xC8, 0xC0, 0x70, 0x5E, 0x8D, 0x45, 0x82, 0x78, 0x53, 0xA2, 0xD6, 0x78,
        0x25, 0x0E, 0x53, 0x30, 0x42, 0x88, 0x4B, 0x45, 0xC7, 0xE0, 0x78, 0x11, 0x57, 0x41, 0x8F, 0x56, 0x0A, 0x15, 0x73,
        0xC6, 0x29, 0x46, 0x08, 0x89, 0x65, 0x92, 0x56, 0xD7, 0x74, 0xE5, 0xF7, 0xA7, 0x13, 0x08, 0xF7, 0x45, 0x61, 0x02,
        0xF4, 0x42, 0xF4, 0x15, 0x5E, 0x9A, 0x29, 0xE3, 0x6D, 0x70, 0xE8, 0xA1, 0x63, 0x65, 0x0C, 0x26, 0x40, 0x2F, 0x24,
        0x3E, 0x90, 0x54, 0xDD, 0x52, 0x18, 0x6F, 0x4B, 0xB2, 0x90, 0x81, 0xEF, 0x0A, 0x35, 0xE8, 0xA6, 0xA1, 0x17, 0x92,
        0x9D, 0xB8, 0x5A, 0xED, 0xB8, 0x8C, 0x1E, 0x46, 0x0E, 0x18, 0xD0, 0x02, 0x53, 0x0B, 0xD1, 0x79, 0x3F, 0xA6, 0x22,
        0xA4, 0x5B, 0x64, 0x27, 0x86, 0xE9, 0x47, 0xF3, 0xD4, 0x42, 0xB2, 0xAA, 0xB3, 0xEA, 0xE6, 0x3C, 0xCA, 0xA3, 0xEE,
        0xF4, 0x53, 0x6A, 0x55, 0x91, 0x19, 0x5A, 0x21, 0xFA, 0x2E, 0x3B, 0x55, 0xEC, 0x7E, 0x8A, 0xC9, 0x95, 0x47, 0xD4,
        0x4D, 0x26, 0xEF, 0xD0, 0x91, 0x52, 0x88, 0xEE, 0xAC, 0x06, 0x47, 0x0B, 0x5D, 0x8B, 0x0E, 0xBD, 0x35, 0xA8, 0xB6,
        0xB3, 0x87, 0xA3, 0xC3, 0x06, 0xFC, 0xA1, 0xA0, 0x9A, 0x16, 0xE7, 0xC1, 0x0A, 0xE5, 0xA5, 0xA2, 0xEF, 0xC8, 0x75,
        0xBE, 0xEF, 0x16, 0x5A, 0xB0, 0x2F, 0x1C, 0xC0, 0xEA, 0xFC, 0x12, 0x0E, 0x6B, 0x35, 0x24, 0x87, 0x32, 0xD6, 0x1E,
        0xAE, 0xC6, 0x61, 0x1D, 0x6C, 0x50, 0x46, 0x88, 0xBE, 0x2B, 0x77, 0x38, 0xBB, 0x7B, 0xAD, 0xE8, 0x2E, 0x2B, 0x3B,
        0x39, 0x0C, 0x97, 0xC7, 0x83, 0xB9, 0x6F, 0x1E, 0xE3, 0xB8, 0x79, 0x0C, 0x46, 0xE8, 0x84, 0x78, 0x03, 0x3E, 0x64,
        0x46, 0xF2, 0xB8, 0x2E, 0x0A, 0x53, 0x63, 0x28, 0x7F, 0x30, 0x0B, 0x77, 0x8F, 0x07, 0x8C, 0xD0, 0x09, 0x49, 0xAB,
        0x21, 0xA2, 0xEB, 0x1A, 0xBF, 0x2C, 0x9D, 0xBE, 0xFA, 0x73, 0x69, 0xBC, 0xF7, 0xE9, 0x27, 0x94, 0xE3, 0x14, 0xAA,
        0x1A, 0xA2, 0x8B, 0xF8, 0xFF, 0xEE, 0x3E, 0x54, 0x05, 0x5A, 0x2F, 0xD9, 0x9E, 0xB4, 0x5A, 0x56, 0xDA, 0x39, 0x6E,
        0x36, 0x71, 0xDA, 0x3A, 0x51, 0xE7, 0x61, 0xA5, 0x39, 0xA7, 0xC7, 0xAD, 0xD2, 0x92, 0x0B, 0x2E, 0x97, 0xCB, 0xDA,
        0xF7, 0xFB, 0x6F, 0xF8, 0x42, 0x01, 0x94, 0x3F, 0x7C, 0x07, 0x3F, 0x7C, 0xF1, 0x15, 0xD5, 0x7E, 0x60, 0x2A, 0x21,
        0x99, 0x92, 0x5E, 0x9E, 0xED, 0x69, 0x3B, 0xAF, 0xB7, 0xFB, 0xEC, 0x6E, 0x55, 0xF1, 0xF2, 0x8F, 0x4D, 0xEC, 0x6C,
        0x6E, 0xE3, 0x70, 0xAF, 0xA6, 0x3A, 0xA6, 0x7A, 0xC7, 0xB5, 0x74, 0x1D, 0x01, 0x7A, 0xED, 0xA4, 0x47, 0xA5, 0x3E,
        0x7F, 0x30, 0x60, 0x45, 0x41, 0x5F, 0x36, 0x85, 0x50, 0x34, 0xA2, 0x9E, 0xBC, 0xF8, 0xDA, 0x70, 0x3C, 0x62, 0x0D,
        0x1E, 0xB7, 0xD7, 0x36, 0xC0, 0x02, 0x8D, 0x10, 0xBD, 0x88, 0xF4, 0xCF, 0xCE, 0x4A, 0x5F, 0xB5, 0xFB, 0xD5, 0x5D,
        0xAC, 0x2E, 0x2C, 0x61, 0x7D, 0x69, 0x05, 0x47, 0xF5, 0xA3, 0xD7, 0xFA, 0x3F, 0xFA, 0x7D, 0xC7, 0x47, 0x4D, 0xEB,
        0xD8, 0x7F, 0xF9, 0x0A, 0x1B, 0xBF, 0xAE, 0x62, 0xF1, 0xC9, 0x9C, 0xB5, 0x21, 0x5B, 0x8F, 0x61, 0x92, 0xF9, 0x41,
        0xF8, 0x7B, 0xFF, 0x9E, 0x69, 0xE9, 0xCD, 0x10, 0xD5, 0x8D, 0x17, 0x38, 0x3D, 0x39, 0x01, 0x03, 0x34, 0x42, 0xE2,
        0x03, 0x09, 0xF5, 0x45, 0xFD, 0xB5, 0x2F, 0xF7, 0x60, 0x77, 0x0F, 0xBF, 0x2F, 0x2C, 0xAB, 0xE3, 0xB9, 0xF5, 0xC5,
        0x76, 0x83, 0x7A, 0xED, 0x00, 0x8B, 0x8F, 0xE7, 0xF0, 0x9B, 0x6A, 0x7D, 0xF5, 0xB2, 0x6E, 0x4E, 0xC9, 0xD7, 0xCB,
        0xBE, 0xB1, 0x74, 0xBF, 0xD5, 0x66, 0x77, 0xDA, 0x4E, 0x74, 0x1B, 0x38, 0x12, 0xE9, 0xFC, 0x67, 0xFA, 0x2F, 0x6E,
        0x11, 0x9D, 0x66, 0xEE, 0x7D, 0xF4, 0xAE, 0xCA, 0xFD, 0x6E, 0x2C, 0x3C, 0x9A, 0xC3, 0xCF, 0xDF, 0x3E, 0x41, 0x75,
        0x7D, 0xEB, 0x5A, 0xAE, 0xDA, 0x96, 0xAA, 0x39, 0x3B, 0x2A, 0x22, 0x56, 0x9F, 0x2D, 0x5B, 0xAD, 0x70, 0x28, 0x16,
        0x81, 0x47, 0x35, 0x11, 0x3A, 0x92, 0x18, 0xA0, 0x88, 0x10, 0xFD, 0xDB, 0x8E, 0x66, 0xA3, 0x89, 0xEF, 0x3E, 0xFF,
        0x12, 0xF5, 0xFD, 0x03, 0xDC, 0x04, 0x3A, 0xF2, 0xE6, 0x1F, 0xFE, 0x84, 0xCD, 0x95, 0x55, 0x14, 0xA7, 0x27, 0xE0,
        0x0B, 0xFA, 0x71, 0x78, 0x43, 0x9F, 0xFD, 0x5F, 0x90, 0xA4, 0x2C, 0x1B, 0x7E, 0xFC, 0xFA, 0x7B, 0x9C, 0x75, 0xD8,
        0xAB, 0x7B, 0xDD, 0x54, 0xD7, 0x5F, 0xA8, 0xB1, 0xCA, 0xA3, 0x8E, 0xCD, 0xC4, 0x6D, 0x40, 0x21, 0xA4, 0xBA, 0xB1,
        0x85, 0xDB, 0xA4, 0xD9, 0x68, 0x58, 0x07, 0x03, 0xF2, 0xB3, 0x68, 0x32, 0x44, 0x08, 0x19, 0x22, 0x84, 0x0C, 0x11,
        0x42, 0x86, 0x08, 0x21, 0x43, 0x84, 0x90, 0x21, 0x42, 0xC8, 0x10, 0x21, 0x64, 0x88, 0x10, 0x32, 0x44, 0x08, 0x19,
        0x22, 0x84, 0x0C, 0x11, 0x42, 0x86, 0x08, 0x21, 0x43, 0x84, 0x90, 0x21, 0x42, 0xC8, 0x10, 0x21, 0x64, 0x88, 0x10,
        0x32, 0x44, 0x08, 0x19, 0x22, 0x84, 0x0C, 0x11, 0x42, 0x86, 0x08, 0x21, 0x43, 0x84, 0x90, 0x21, 0x42, 0xC8, 0x10,
        0x21, 0x64, 0x88, 0x10, 0x32, 0x44, 0x08, 0x19, 0x22, 0x84, 0x0C, 0x11, 0x42, 0x86, 0x08, 0x21, 0x43, 0x84, 0x90,
        0x21, 0x42, 0xC8, 0x10, 0x21, 0x64, 0x88, 0x10, 0x32, 0x44, 0x08, 0x19, 0x22, 0x84, 0x0C, 0x11, 0x42, 0xC6, 0x9F,
        0x86, 0xC6, 0x0A, 0x4A, 0xB4, 0xC4, 0xDA, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60,
        0x82
    };

    bool LoadTextureFromMemory( GLuint* out_texture, int out_width, int out_height, int order )
    {
        int image_width = 0;
        int image_height = 0;

        unsigned char* image_data = stbi_load_from_memory( LOGO, sizeof( LOGO ), &image_width, &image_height, NULL, 4 );

        if ( image_data == NULL )
            return false;

        GLuint image_texture;
        glGenTextures( 1, &image_texture );
        glBindTexture( GL_TEXTURE_2D, image_texture );

        // Setup filtering parameters for display
        glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );
        glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );

        // Upload pixels into texture
#if defined( GL_UNPACK_ROW_LENGTH ) && !defined( __EMSCRIPTEN__ )
        glPixelStorei( GL_UNPACK_ROW_LENGTH, 0 );
#endif
        glTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA, image_width, image_height, 0, GL_RGBA, GL_UNSIGNED_BYTE, image_data );
        stbi_image_free( image_data );

        *out_texture = image_texture;
        out_width = image_width;
        out_height = image_height;

        glBindTexture( GL_TEXTURE_2D, 0 );

        return true;
    }

    // error callback function for prettyness ;)
    static void glfw_error_callback( int error, const char* const description )
    {
        log_mgr.log_error( "overlay", "GLFW (%d): %s\n", error, description );
    }

    void glfw_key_callback( GLFWwindow* window )
    {
        // ensure that the desired process window is selected
        if ( !IS_RENDERABLE )
            return;

        if ( GetAsyncKeyState( VK_INSERT ) & 0x01 )
        {
            overlay_mgr.show_ui = !overlay_mgr.show_ui;
        }
    }

    void glfw_update_focus( GLFWwindow* window )
    {
        // weird code that makes the ui work magic
        overlay_mgr.is_focused = process_hook_mgr.window_active || ( glfwGetWindowAttrib( window, GLFW_FOCUSED ) ||
                                                                     glfwGetWindowAttrib( window, GLFW_FLOATING ) );

        glfwSetWindowAttrib( window, GLFW_FLOATING, process_hook_mgr.window_active );

        if ( !overlay_mgr.is_focused )
            glfwSetWindowAttrib( window, GLFW_MOUSE_PASSTHROUGH, true );
    }

    bool overlay::setup_glflw()
    {
        glfwSetErrorCallback( glfw_error_callback );

        if ( !glfwInit() )
            return false;

        glfwWindowHint( GLFW_RESIZABLE, GLFW_FALSE );
        glfwWindowHint( GLFW_TRANSPARENT_FRAMEBUFFER, GLFW_TRUE );

        // create our window
        if ( !( window = glfwCreateWindow( 800, 800, title, nullptr, nullptr ) ) )
        {
            glfwTerminate();
            return false;
        }

        glfwSetWindowAttrib( window, GLFW_DECORATED, GLFW_FALSE );
        glfwSetWindowAttrib( window, GLFW_FLOATING, GLFW_TRUE );

        // glfwSetWindowFocusCallback( window, glfw_focus_callback );

        // make the window's context current
        glfwMakeContextCurrent( window );
        glfwShowWindow( window );
        glfwSwapInterval( 0 );
        return true;
    }

    void overlay::setup_imgui()
    {
        // setup imgui context
        IMGUI_CHECKVERSION();
        ImGui::CreateContext();

        ImGuiIO& io = ImGui::GetIO();
        ( void )io;

        io.FontDefault = io.Fonts->AddFontFromMemoryTTF( inter, sizeof( inter ), 17.0f );
        nord::menu_mgr.small_font = io.Fonts->AddFontFromMemoryTTF( inter, sizeof( inter ), 10 );

        nord::menu_mgr.widget_normal = io.Fonts->AddFontFromMemoryTTF( inter, sizeof( inter ), 12 );
        nord::menu_mgr.widget_small = io.Fonts->AddFontFromMemoryTTF( inter, sizeof( inter ), 10 );

        static const ImWchar icons_ranges[] = { 0x21, 0xf8ff, 0 };
        ImFontConfig icons_config;
        icons_config.MergeMode = true;
        icons_config.PixelSnapH = true;
        nord::menu_mgr.icon_font =
            io.Fonts->AddFontFromMemoryTTF( Solid, sizeof( Solid ), 17.0f, &icons_config, icons_ranges );

        // setup imgui style
        ImGui::StyleColorsDark();

        // setup platform/renderer backends
        ImGui_ImplGlfw_InitForOpenGL( window, true );
        ImGui_ImplOpenGL3_Init( get_glsl_version() );
    }

    bool overlay::start()
    {
        // setup glflw window
        if ( !setup_glflw() )
            return false;

        // setup imgui instance
        setup_imgui();

        // initiate any variables needed for the menu
        menu_mgr.initiate();

        // loads nord logo
        LoadTextureFromMemory( &nord::menu_mgr.logo_texture, 500, 500, 0 );

        // loop until the user closes roblox
        while ( process_hook_mgr.window != nullptr && !glfwWindowShouldClose( window ) )
        {
            glfwPollEvents();

            // update window position and size
            glfwSetWindowPos( window, process_hook_mgr.screen.x, process_hook_mgr.screen.y );
            glfwSetWindowSize( window, process_hook_mgr.screen.width, process_hook_mgr.screen.height );

            __try
            {
                render();
            }
            __except ( EXCEPTION_EXECUTE_HANDLER )
            {
            }

            // key callback function
            glfw_key_callback( window );

            // update focus
            glfw_update_focus( window );

            glfwSwapBuffers( window );

            process_hook_mgr.load_window();
        }

        // cleanup
        destroy_imgui();
        destroy_glflw();
        return true;
    }

    void overlay::render()
    {
        try
        {
            ImGui_ImplOpenGL3_NewFrame();
            ImGui_ImplGlfw_NewFrame();
            ImGui::NewFrame();

            ImGui::PushFont( menu_mgr.widget_normal );

            const auto draw_list = ImGui::GetBackgroundDrawList();
            render_list.begin();
            render_list.draw( draw_list );
            render_list.end();

            ImGui::PopFont();

            glfwSetWindowAttrib( window, GLFW_MOUSE_PASSTHROUGH, !( overlay_mgr.show_ui && overlay_mgr.is_focused ) );

            if ( show_ui )
                menu_mgr.render();

            ImGui::Render();

            int display_w, display_h;
            glfwGetFramebufferSize( window, &display_w, &display_h );
            glViewport( 0, 0, display_w, display_h );
            glClearColor( 0.0f, 0.0f, 0.0f, ( show_ui ) ? 0.2f : 0.0f );
            glClear( GL_COLOR_BUFFER_BIT );

            // only render if the game window is selected
            ImGui_ImplOpenGL3_RenderDrawData( ImGui::GetDrawData() );
        }
        catch ( const std::exception& )
        {
        }
    }

    void overlay::destroy_glflw()
    {
        glfwDestroyWindow( window );
        glfwTerminate();
    }

    void overlay::destroy_imgui()
    {
        ImGui_ImplOpenGL3_Shutdown();
        ImGui_ImplGlfw_Shutdown();
        ImGui::DestroyContext();
    }

    const char* overlay::get_glsl_version()
    {
        // decide GL+GLSL versions
#if defined( IMGUI_IMPL_OPENGL_ES2 )
        // GL ES 2.0 + GLSL 100
        const char* glsl_version = "#version 100";
        glfwWindowHint( GLFW_CONTEXT_VERSION_MAJOR, 2 );
        glfwWindowHint( GLFW_CONTEXT_VERSION_MINOR, 0 );
        glfwWindowHint( GLFW_CLIENT_API, GLFW_OPENGL_ES_API );
#elif defined( __APPLE__ )
        // GL 3.2 + GLSL 150
        const char* glsl_version = "#version 150";
        glfwWindowHint( GLFW_CONTEXT_VERSION_MAJOR, 3 );
        glfwWindowHint( GLFW_CONTEXT_VERSION_MINOR, 2 );
        glfwWindowHint( GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE );  // 3.2+ only
        glfwWindowHint( GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE );            // Required on Mac
#else
        // GL 3.0 + GLSL 130
        const char* glsl_version = "#version 130";
        glfwWindowHint( GLFW_CONTEXT_VERSION_MAJOR, 3 );
        glfwWindowHint( GLFW_CONTEXT_VERSION_MINOR, 0 );
        // glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);  // 3.2+ only
        // glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);            // 3.0+ only
#endif
        return glsl_version;
    }

    overlay overlay_mgr{ "nord" };
}  // namespace nord